- name: all
  category: List
  sig: "(a -> Boolean) -> [a] -> Boolean"
  params:
    - name: fn
      type: Function
      description: The predicate function.
    - name: list
      type: Array
      description: The array to consider.
  returns:
    type: Boolean
    description: |
      `true` if the predicate is satisfied by every element, `false` otherwise
  description: |
    Returns `true` if all elements of the list match the predicate, `false` if
    there are any that don't.
  example: |
    var lessThan2 = R.flip(R.lt)(2);
    var lessThan3 = R.flip(R.lt)(3);
    var xs = R.range(1, 3);
    xs; //=> [1, 2]
    R.all(lessThan2)(xs); //=> false
    R.all(lessThan3)(xs); //=> true
- name: foldl
  category: List
  sig: "(a, b -> a) -> a -> [b] -> a"
  params:
    - name: fn
      type: Function
      description: |
        The iterator function. Receives two values, the accumulator and the
        current element from the array.
    - name: acc
      type: any
      description: The accumulator value.
    - name: list
      type: Array
      description: The list to iterate over.
  returns:
    type: any
    description: The final, accumulated value.
  example: |
    var numbers = [1, 2, 3];
    var add = function(a, b) {
      return a + b;
    };

    R.foldl(add, 10, numbers); //=> 16
  description: |
    Returns a single item by iterating through the list, successively calling
    the iterator function and passing it an accumulator value and the current
    value from the array, and then passing the result to the next call.

    The iterator function receives two values: *(acc, value)*

    Note: `R.foldl` does not skip deleted or unassigned indices (sparse arrays),
    unlike the native `Array.prototype.reduce` method. For more details on this
    behavior, see [the MDN page on Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description).
- name: prop
  category: Object
  sig: "s -> {s: a} -> a"
  params:
    - name: p
      type: String
      description: The property name
    - name: obj
      type: Object
      description: The object to query
  returns:
    type: any
    description: The value at `obj.p`
  description: |
    Returns a function that when supplied an object returns the indicated
    property of that object, if it exists.
  example: |
    R.prop('x', {x: 100}); //=> 100
    R.prop('x', {}); //=> undefined

    var fifth = R.prop(4);
    var dwarfs = ['Bashful', 'Doc', 'Dopey', 'Grumpy', 'Happy', 'Sleepy', 'Sneezy'];
    fifth(dwarfs); //=> 'Happy'
