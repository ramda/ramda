#!/usr/bin/env node

'use strict';

var fs = require('fs');
var path = require('path');

var acorn = require('acorn');
var program = require('commander');
var escodegen = require('escodegen');
var R = require('ramda');


var _ = R.__;

//  template :: String
var template = fs.readFileSync(path.join(__dirname, 'template.js'),
                               {encoding: 'utf8'});

//  version :: String
var version = require('../package.json').version;

//  logWithPrefix = String -> String -> ()
var logWithPrefix = R.curry(function(prefix, message) {
  process.stderr.write(prefix + message + '\n');
});

//  warn :: String -> ()
var warn = logWithPrefix('\u001b[33m>>> WARNING: \u001b[39;49m');

//  abort :: String -> !
var abort = R.pipe(
  logWithPrefix('\u001b[31m>>> ERROR: \u001b[39;49m'),
  R.always(1),
  process.exit
);

//  filenameToIdentifier :: String -> String
var filenameToIdentifier = R.partialRight(path.basename, '.js');

//  identifierToFilename :: String -> String
var identifierToFilename =
R.pipe(R.ifElse(R.test(/^(?!__$)_/),
                R.partial(path.join, __dirname, '..', 'src', 'internal'),
                R.partial(path.join, __dirname, '..', 'src')),
       R.concat(_, '.js'));

//  parse :: String -> {ast: AST, comments: [Comment], tokens: [Token]}
var parse = R.memoize(function(filename) {
  var comments = [];
  var tokens = [];
  return {
    ast: acorn.parse(fs.readFileSync(filename), {
      ranges: true,
      locations: true,
      sourceFile: filename,
      onComment: comments,
      onToken: tokens
    }),
    comments: comments,
    tokens: tokens
  };
});

//  isModuleExportsExpr :: {*} -> Boolean
var isModuleExportsExpr = R.allPass([
  R.pathEq(['type'], 'ExpressionStatement'),
  R.pathEq(['expression', 'type'], 'AssignmentExpression'),
  R.pathEq(['expression', 'operator'], '='),
  R.pathEq(['expression', 'left', 'type'], 'MemberExpression'),
  R.pathEq(['expression', 'left', 'object', 'type'], 'Identifier'),
  R.pathEq(['expression', 'left', 'object', 'name'], 'module'),
  R.pathEq(['expression', 'left', 'property', 'type'], 'Identifier'),
  R.pathEq(['expression', 'left', 'property', 'name'], 'exports')
]);

//  isRequireExpr :: {*} -> Boolean
var isRequireExpr = R.allPass([
  R.pathEq(['init', 'type'], 'CallExpression'),
  R.pathEq(['init', 'callee', 'type'], 'Identifier'),
  R.pathEq(['init', 'callee', 'name'], 'require'),
  R.pathEq(['init', 'arguments', 'length'], 1),
  R.pathEq(['init', 'arguments', '0', 'type'], 'Literal')
]);

//  warnIgnoredTopLevel :: {*} -> {*}
var warnIgnoredTopLevel = R.tap(R.pipe(
  R.chain(R.ifElse(R.propEq('type', 'VariableDeclaration'),
                   R.prop('declarations'),
                   R.of)),
  R.reject(R.either(isModuleExportsExpr, isRequireExpr)),
  R.map(function(ast) {
    return 'Top-level declaration `' + ast.id.name +
      '` ignored in ' + ast.loc.source + ':' + ast.loc.start.line;
  }),
  R.forEach(warn)
));

//  abortIfNotSorted :: List[{*}] -> List[{*}]
var abortIfNotSorted = R.tap(R.cond([[
  R.complement(R.pipe(
      R.pluck('id'),
      R.pluck('name'),
      R.converge(R.equals, R.identity, R.sortBy(R.identity))
    )),
  R.pipe(
      R.path(['0', 'loc', 'source']),
      R.concat('Dependencies not declared in alphabetical order in '),
      abort
    )
]])
);

//  abortIfExportNotLast :: {*} -> {*}
var abortIfExportNotLast = R.tap(R.cond([[
  R.complement(R.pipe(R.prop('body'), R.last, isModuleExportsExpr)),
  R.pipe(
    R.path(['loc', 'source']),
    R.concat('module.exports not positioned last in '),
    abort
  )
]]));

//  abortIfDifferentRequireVar :: {*} -> {*}
var abortIfDifferentRequireVar = R.tap(R.forEach(R.cond([[
  R.converge(
    R.complement(R.equals),
    R.path(['id', 'name']),
    R.pipe(
      R.path(['init', 'arguments', '0', 'value']),
      R.replace(/^[.][/]internal[/]/, './'),
      R.replace(/^[.]{1,2}[/]/, ''),
      R.replace(/[.]([a-z])/g, R.pipe(R.nthArg(1), R.toUpper))
    )
  ),
  function(ast) {
    abort('Dependency declared with different variable name: `' +
      ast.id.name + '` & `' +
      ast.init.arguments[0].value +
      '` in ' + ast.loc.source
    );
  }
]])));

//  abortIfEmptyBody :: {*} -> {*}
var abortIfEmptyBody = R.tap(R.cond([[
  R.pipe(R.prop('body'), R.isEmpty),
  R.pipe(
    R.path(['loc', 'source']),
    R.concat('Nothing parsable in '),
    abort
  )
]]));

// dependenciesOf :: String -> [String]
//
// Returns the names of the immediate dependencies of the function with
// the given name.
//
// Assumes this format:
//
//     var _quux = require('./_quux');
//     var bar = require('./bar');
//     var baz = require('./baz');
//     var foo = require('./foo');
//
// Requirements:
//
//   - one `var` per import;
//   - argument to require must be a string literal; and
//   - require path must match identifier.
var dependenciesOf =
R.pipe(identifierToFilename,
       parse,
       R.prop('ast'),
       R.prop('body'),
       warnIgnoredTopLevel,
       R.takeWhile(R.both(R.propEq('type', 'VariableDeclaration'),
                          R.pipe(R.prop('declarations'),
                                 R.all(isRequireExpr)))),
  R.pluck('declarations'),
       R.map(R.head),
       abortIfNotSorted,
       abortIfDifferentRequireVar,
       R.map(R.path(['id', 'name'])));

//  createDependencyGraph :: [String] -> StrMap [String]
var createDependencyGraph = function createDependencyGraph(identifiers) {
  var graph = {};
  var recur = function recur(identifier) {
    if (!R.has(identifier, graph)) {
      graph[identifier] = dependenciesOf(identifier);
      graph[identifier].forEach(recur);
    }
  };
  identifiers.forEach(recur);
  return graph;
};

//  orderDependencies :: StrMap [String] -> [String]
var orderDependencies = function orderDependencies(graph) {
  var recur = function recur(ins, outs) {
    if (R.isEmpty(ins)) {
      return outs;
    } else if (R.all(R.contains(_, outs), graph[R.head(ins)])) {
      return recur(R.tail(ins), R.append(R.head(ins), outs));
    } else {
      return recur(R.append(R.head(ins), R.tail(ins)), outs);
    }
  };
  return recur(R.sortBy(R.identity, R.keys(graph)), []);
};

//  getModifiedSource :: String -> String
var getModifiedSource = function getModifiedSource(identifier) {
  var obj = parse(identifierToFilename(identifier));
  escodegen.attachComments(obj.ast, obj.comments, obj.tokens);
  abortIfEmptyBody(obj.ast);
  abortIfExportNotLast(obj.ast);
  var last = R.last(obj.ast.body);
  var declarationAst = {
    type: 'VariableDeclaration',
    kind: 'var',
    leadingComments: obj.comments,
    declarations: [
      {
        type: 'VariableDeclarator',
        id: {type: 'Identifier', name: identifier},
        init: last.expression.right
      }
    ]
  };
  return escodegen.generate(declarationAst, {comment: true});
};

//  build :: [String] -> String
var build =
R.pipe(R.map(filenameToIdentifier),
       R.sortBy(R.identity),
       R.converge(R.concat,
                  R.pipe(createDependencyGraph,
                         orderDependencies,
                         R.map(getModifiedSource),
                         R.join('\n\n')),
                  R.pipe(R.map(R.converge(R.concat,
                                          R.concat('\n    '),
                                          R.concat(': '))),
                         R.join(','),
                         R.concat('\n\nvar R = {'),
                         R.concat(_, '\n};'))),
       R.replace(/\n(?!$)/gm, '\n    '),
       R.always,
       R.replace('/* global R */', _, template));

program
.version(version)
.option('--complete', 'Include all Ramda functions')
.parse(process.argv);

//  filenames :: [String]
var filenames = program.complete
  ? R.keys(require('../'))
  : program.args;

process.stdout.write(build(R.map(path.resolve, filenames)));
