var _curry2 = require('./internal/_curry2');
var _reduce = require('./internal/_reduce');

/**
 * Creates an object with the given keys, set to the values generated by running
 * each key in 'keys' through `fn`. `fn` is passed one argument: *(key)*.
 * If a key appears multiple time in keys, it's set to the last value returned
 * for it by `fn`.
 *
 * Note that all keys are coerced to strings because of how avaScript objects work.
 *
 * @func
 * @memberOf R
 * @category Object
 * @sig (v -> v) -> [v] -> {k: v}
 * @param {Function} fn A function called for each key in `keys`. Its return
 * value will become a new property on the return object.
 * @param {Object} keys The list of keys to iterate over.
 * @return {Object} A new object with all of the keys in 'keys' set to the values
 *         that are the result of running each of them through `fn`.
 * @example
 *
 *      R.objFromKeys(R.toUpper, ['a', 'b', 'c']); //=> {a: 'A', b: 'B', c: 'C'}
 */
module.exports = _curry2(function objFromKeys(fn, keys) {
  return _reduce(function(acc, key) {
    acc[key] = fn(key);
    return acc;
  }, {}, keys);
});
